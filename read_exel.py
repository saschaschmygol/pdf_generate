import openpyxl
import pandas as pd
import sqlite3

# Чтение данных из Excel файла
file_path = './Baza.xlsx'
try:
    df = pd.read_excel(file_path, engine='openpyxl')
except Exception as e:
    print(f"Error reading Excel file: {e}")
    raise

# Обработка даты рождения
df['Дата рождения'] = pd.to_datetime(df['Дата рождения'], dayfirst=True, errors='coerce').dt.strftime('%Y-%m-%d')
print(df.columns)  # Проверка наименований столбцов

# Словарь для определения сферы деятельности
sphere_dict = {
    "Хирург": "Медик",
    "Врач-челюстно-лицевой хирург": "Медик",
    "Врач-офтальмолог": "Медик",
    "Медицинская сестра по физиотерапии": "Медик",
    "Медицинская сестра": "Медик",
    "Врач-невролог": "Медик",
    "Инструктор-методист по лечебной физкультуре": "Медик",
    "Медицинский брат по массажу": "Медик",
    "Санитарка": "Медик",
    "Медицинская сестра-анестезист": "Медик",
    "Логопед": "Медик",
    "Старшая медицинская сестра": "Медик",
    "Медицинская сестра диетическая": "Медик",
    "Врач-акушер-гинеколог": "Медик",
    "Врач-специалист": "Медик",
    "Медицинская сестра палатная": "Медик",
    "Заведующий отделением, врач по лечебной физкультуре": "Медик",
    "Врач-анестезиолог-реаниматолог": "Медик",
    "Зубной техник": "Медик",
    "Рентгенолаборант": "Медик",
    "Инструктор-методист": "Медик",
    "Врач-методист": "Медик",
    "Врач-оториноларинголог": "Медик",
    "Врач-специалист": "Медик",
    "Врач-оториноларинголог": "Медик",
    "Врач-офтальмолог": "Медик",
    "Заведующий отделением функциональной диагностики, врач функциональной диагностики": "Медик",
    "Медицинская сестра процедурной": "Медик",
    "Медицинская сестра функциональной диагностики": "Медик",
    "Медицинская сестра операционная": "Медик",
    "Старшая операционная медицинская сестра": "Медик",
    "Заведующий отделением, врач-анестезиолог-реаниматолог": "Медик",
    "Помощник врача-эпидемиолога": "Медик",
    "Врач-психиатр": "Медик",
    "Врач-невролог": "Медик",
    "Врач-офтальмолог": "Медик",
    "Медицинская сестра палатная": "Медик",
    "Врач эпидемиолог": "Медик",
    "Врач-пластический хирург": "Медик",
    "Главный врач": "Медик",
    "Врач-стоматолог-детский": "Медик",
    "Медицинский лабораторный техник": "Медик",
    "Клинический психолог": "Медик",
    "Медицинский брат по массажу": "Медик",
    "Медицинская сестра по физиотерапии": "Медик",
    "Медицинская сестра по массажу": "Медик",
    "Медицинская сестра по физиотерапии": "Медик",
    "Медицинский брат": "Медик",
    "Врач-невролог": "Медик",
    "Врач-невролог": "Медик",
    "Старшая медицинская сестра": "Медик",
    "Врач-невролог": "Медик",
    "Врач по спортивной медицине и лечебной физкультуре": "Медик",
    "Врач-сурдолог-оториноларинголог": "Медик",
    "Массажист": "Медик",
    "Врач-стоматолог-ортопед": "Медик",
    "Врач-педиатр": "Медик",
    "Старшая медицинская сестра": "Медик",
    "Инструктор-методист по ЛФК": "Медик",
    "Врач-анестезиолог-реаниматолог": "Медик",
    "Фармацевт": "Медик",
    "Заведующий отделением, врач-невролог": "Медик",
    "Медицинская сестра процедурной": "Медик",
    "Медицинский лабораторный техник": "Медик",
    "Врач-дерматовенеролог": "Медик",
    "Врач-травматолог-ортопед": "Медик",
    "Медицинская сестра перевязочной": "Медик",
    "Врач-стоматолог": "Медик",
    "Медицинский психолог": "Медик",
    "Медицинская сестра по массажу": "Медик",
    "Врач-травматолог-ортопед": "Медик",
    "Врач-невролог": "Медик",
    "Врач-офтальмолог": "Медик",
    "Врач-методист": "Медик",
    "Инструктор по лечебной физкультуре": "Медик",
    "Заведующий отделением, врач-травматолог-ортопед": "Медик",
    "Заведующий отделением, врач-невролог": "Медик",
    "Врач-педиатр": "Медик",
    "Техник по медицинским газам": "Медик",
    "Провизор": "Медик",
    "Медицинский брат по массажу": "Медик",
    "Медицинская сестра по физиотерапии": "Медик",
    "Медицинский техник": "Медик",
    "Врач косметолог": "Медик",
    "Младшая медицинская сестра по уходу за больными": "Медик",
    "Врач-специалист": "Медик",
    "Заведующий отделом, врач-эпидемиолог": "Медик",
    "Врач-педиатр": "Медик",
    "Клинический психолог": "Медик",
    "Заведующий клинико-диагностической лабораторией, врач клинической лабораторной диагностики": "Медик",
    "Медицинский психолог": "Медик",
    "Врач-травматолог-ортопед": "Медик",
    "Логопед": "Медик",
    "Врач-педиатр": "Медик",
    "Медицинская сестра": "Медик",
    "Медицинский статистик": "Медик",
    "Главная медицинская сестра": "Медик",
    "Медицинская сестра по физиотерапии": "Медик",
    "Врач-физиотерапевт": "Медик",
    "Заведующий стоматологической поликлиникой, врач-стоматолог детский": "Медик",
    "Медицинский брат по массажу": "Медик",
    "Медицинская сестра по физиотерапии": "Медик",
    "Врач-невролог": "Медик",
    "Врач-офтальмолог": "Медик",
    "Санитар": "Медик",
    "Врач-методист": "Медик",
    "Заведующий отделением, врач-невролог": "Медик",
    "Врач-педиатр": "Медик",
    "Врач функциональной диагностики": "Медик",
    "Медицинская сестра по массажу": "Медик",
    "Врач-офтальмолог": "Медик",
    "Медицинская сестра палатная": "Медик",
    "Заведующий консультативно-диагностической поликлиникой №1, врач-педиатр": "Медик",
    "Врач-анестезиолог-реаниматолог": "Медик",
    "Врач-невролог": "Медик",
    "Старшая медицинская сестра": "Медик",
    "Заведующий отделением, врач-невролог": "Медик",
    "Врач-офтальмолог": "Медик",
    "Врач-стажер": "Медик",
    "Заведующий отделением, врач-физиотерапевт": "Медик",
    "Старшая медицинская сестра": "Медик",
    "Врач-педиатр": "Медик",
    # Добавьте другие должности по необходимости
}

# Определение пола по отчеству
def determine_gender(patronymic):
    if patronymic.endswith("ич"):
        return "М"
    elif patronymic.endswith("на"):
        return "Ж"

# Функция для определения сферы деятельности
def determine_sphere(name):
    if isinstance(name, str):
        return sphere_dict.get(name, "Не медик")
    return "Не медик"


# Подключение к базе данных SQLite
try:
    conn = sqlite3.connect('./1.db')
    cursor = conn.cursor()
except Exception as e:
    print(f"Error connecting to SQLite database: {e}")
    raise

# Начало транзакции
conn.execute('BEGIN TRANSACTION')

# Функция для преобразования NULL значений
def normalize_value(value):
    return value if value is not None else 'NULL_VALUE'

# Вставка или обновление данных в таблицу Должность
for index, row in df.iterrows():
    name = normalize_value(row['Штатная должность']) if pd.notnull(row['Штатная должность']) else 'NULL_VALUE'
    sphere = determine_sphere(name)
    subdivision = normalize_value(row['Штатное подразделение']) if pd.notnull(row['Штатное подразделение']) else 'NULL_VALUE'
    short_name = normalize_value(row['Краткое название']) if pd.notnull(row['Краткое название']) else 'NULL_VALUE'

    try:
        print(f"Processing row {index}: name={name}, subdivision={subdivision}, short_name={short_name}, sphere={sphere}")

        # Вставка данных или обновление при конфликте
        cursor.execute("""
            INSERT INTO Должность (name, Сфера_Работы, Подразделение, Краткое_Название)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(name, Подразделение, Краткое_Название) 
            DO UPDATE SET Сфера_Работы = excluded.Сфера_Работы
        """, (name, sphere, subdivision, short_name))
        print(f"Inserted or updated Должность: name={name}, subdivision={subdivision}, short_name={short_name}, sphere={sphere}")

    except sqlite3.IntegrityError as e:
        print(f"IntegrityError inserting or updating row {index}: {e}")
    except Exception as e:
        print(f"Error inserting or updating row {index}: {e}")

# Вставка или обновление данных в таблицу Сотрудник
for index, row in df.iterrows():
    try:
        # Формирование условия для поиска должности с учетом возможных NULL значений
        query = "SELECT ID FROM Должность WHERE 1=1"
        params = []

        if not pd.isna(row['Штатная должность']):
            query += " AND name = ?"
            params.append(row['Штатная должность'])

        if not pd.isna(row['Штатное подразделение']):
            query += " AND Подразделение = ?"
            params.append(row['Штатное подразделение'])

        if not pd.isna(row['Краткое название']):
            query += " AND Краткое_Название = ?"
            params.append(row['Краткое название'])

        cursor.execute(query, params)
        result = cursor.fetchone()

        if result:
            должность_id = result[0]
            print(f"Found Должность ID: {должность_id} for {row['Штатная должность']} in {row['Штатное подразделение']}")
        else:
            должность_id = None
            print(f"No matching Должность found for {row['Штатная должность']} in {row['Штатное подразделение']} with {row['Краткое название']}")

        # Определение пола по отчеству
        gender = determine_gender(row.get('Отчество', ''))

        # Вставка или обновление данных сотрудника
        cursor.execute("""
            INSERT INTO Сотрудник (ID, Фамилия, Имя, Отчество, Пол, Дата_Рождения, Статус, Должность_Сотрудника)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT(ID) DO UPDATE SET
                Фамилия = excluded.Фамилия,
                Имя = excluded.Имя,
                Отчество = excluded.Отчество,
                Пол = excluded.Пол,
                Дата_Рождения = excluded.Дата_Рождения,
                Статус = excluded.Статус,
                Должность_Сотрудника = excluded.Должность_Сотрудника
        """, (
            row['№'], row['Фамилия'], row['Имя'], row['Отчество'], gender, row.get('Дата рождения', None),
            row.get('Статус', None), должность_id
        ))
        print(f"Inserted or updated Сотрудник: {row['№']}, {row['Фамилия']}, {row['Имя']}, {row['Отчество']}, Пол: {gender}, Должность ID: {должность_id}")

    except sqlite3.IntegrityError as e:
        print(f"IntegrityError inserting or updating row {index}: {e}")
    except Exception as e:
        print(f"Error inserting or updating row {index}: {e}")

# Вставка данных в таблицу Вакцинация
# Словарь соответствий названий прививок
vaccination_mapping = {
    'ГВ': 'Гепатит B',
    'Клещевой энцефалит': 'Клещевой энцефалит',
    'АДС-м': 'Дифтерия, столбняк',
    'Шигеллвак': 'Дизентерия Зонне',
    'Корь': 'Корь',
    'Краснуха': 'Краснуха',
    'Гепатит А': 'Гепатит А',
    'Грипп': 'Грипп',
    'Ветряная оспа': 'Ветряная оспа',
    'ВПЧ': 'Коклюш',
    'Пневмо': 'Пневмококковая инфекция',
    'НКВИ': 'НКВИ',
}

# Вставка данных в таблицу Вакцинация
for index, row in df.iterrows():
    сотрудник_id = row['№']  # предполагаем, что это уникальный идентификатор сотрудника в таблице Сотрудник

    вакцинации = {
        'ГВ': row['ГВ'],
        'Клещевой энцефалит': row['Клещевой энцефалит'],
        'АДС-м': row['АДС-м'],
        'Шигеллвак': row['Шигеллвак'],
        'Корь': row['Корь'],
        'Краснуха': row['Краснуха'],
        'Гепатит А': row['Гепатит А'],
        'Грипп': row['Грипп'],
        'Ветряная оспа': row['Ветряная оспа'],
        'ВПЧ': row['ВПЧ'],
        'Пневмо': row['Пневмо'],
        'НКВИ': row['НКВИ'],
        'Гиг.аттестация': row['Гиг.аттестация']
    }

    for вакцина, данные in вакцинации.items():
        if pd.notna(данные):
            прививки = данные.split(';')
            for прививка in прививки:
                прививка = прививка.strip()
                if прививка:
                    try:
                        тип, дата = прививка.rsplit(' ', 1)
                        дата = pd.to_datetime(дата, dayfirst=True, errors='coerce').strftime('%Y-%m-%d')
                        тип = тип.upper()

                        # Получаем корректное название прививки из словаря
                        название_прививки = vaccination_mapping.get(вакцина, None)
                        if название_прививки and тип in ('V1', 'V2', 'V3', 'RV', 'RV1'):
                            cursor.execute("""
                                INSERT INTO Вакцинация (ID_Сотрудника, Название_Прививки, Дата, Тип)
                                VALUES (?, ?, ?, ?)
                                ON CONFLICT(ID_Сотрудника, Название_Прививки, Дата, Тип) DO NOTHING
                            """, (сотрудник_id, название_прививки, дата, тип))
                            print(f"Inserted into Вакцинация: Сотрудник ID: {сотрудник_id}, Вакцина: {название_прививки}, Дата: {дата}, Тип: {тип}")
                        else:
                            print(f"Invalid Тип or no mapping found for Сотрудник ID: {сотрудник_id}, Вакцина: {вакцина}, Дата: {дата}, Тип: {тип}")
                    except Exception as e:
                        print(f"Error inserting vaccination for Сотрудник ID: {сотрудник_id}, Вакцина: {вакцина}, Дата: {дата}, Тип: {тип} - {e}")

# Вставка данных в таблицу Показатель_AntiHBs
for index, row in df.iterrows():
    сотрудник_id = row['№']
    показатель_anti_hbs = row.get('Показатель Anti-HBs октябрь 2023 мМЕ/мл')

    try:
        if pd.notna(показатель_anti_hbs):
            if isinstance(показатель_anti_hbs, str):
                дата, значение = показатель_anti_hbs.split()
                дата = pd.to_datetime(дата, dayfirst=True, errors='coerce').strftime('%Y-%m-%d')
                значение = int(значение)
            elif isinstance(показатель_anti_hbs, (int, float)):
                дата = '2023-10-01'
                значение = int(показатель_anti_hbs)

            # Сначала пробуем обновить запись
            cursor.execute("""
                UPDATE Показатель_AntiHBs
                SET Значение = ?
                WHERE ID_Сотрудника = ? AND Дата = ?
            """, (значение, сотрудник_id, дата))

            # Проверяем, были ли обновлены строки
            if cursor.rowcount == 0:
                cursor.execute("""
                    INSERT INTO Показатель_AntiHBs (ID_Сотрудника, Дата, Значение)
                    VALUES (?, ?, ?)
                """, (сотрудник_id, дата, значение))
            print(f"Processed Показатель_AntiHBs for Сотрудник ID: {сотрудник_id}, Дата: {дата}, Значение: {значение}")
        else:
            print(f"Missing data for Сотрудник ID: {сотрудник_id}, value: {показатель_anti_hbs}")

    except Exception as e:
        print(f"Error processing Показатель_AntiHBs for Сотрудник ID: {сотрудник_id}, value: {показатель_anti_hbs} - {e}")

# Сохранение изменений в базе данных
conn.commit()
conn.close()







